-- creating a Database name toys_analysis 
Create database toys_analysis;
-- to View all 4 tables 
SELECT * From Products;
select * From Stores;
select * From Inventory;
select * From Sales;
-- **********************************QUERIES*****************************************

-- 1.What is the total Sales revenue generated by each store?
SELECT 
    Stores.Store_Name,
    SUM(Products.Product_Price * Sales.Units) AS Total_Revenue_$
From
    Stores
        Join
    Sales ON Stores.Store_ID = Sales.Store_ID
        Join
    Products ON Products.Product_Id = Sales.Product_Id
Group By Stores.Store_Name
Order By Total_Revenue_$ DESC;

-- ***************************************************************************************** 
-- 2. Which Products are the top-selling in terms of Units sold
SELECT 
    Products.Product_Name, SUM(Sales.Units) AS Unit_Sold
From
    Products
        Join
    Sales ON Products.Product_Id = Sales.Product_Id
Group By Products.Product_Name
Order By Unit_Sold DESC
LIMIT 10;

-- *****************************************************************************************
-- 3. What is the Sales performance by product category?
SELECT DISTINCT
    Product_Category,
    ROUND(SUM(Products.Product_Price * Sales.Units),
            4) AS Sales_$,
    SUM(Sales.Units) AS Units_Sold
From
    Products
        Join
    Sales ON Products.Product_Id = Sales.Product_Id
Group By Product_Category
Order By Sales_$ DESC;

-- ****************************************************************************************
-- 4. What are the current Inventory levels for each product at each store?
SELECT 
	Stores.Store_Name,
    Products.Product_Name,
    Inventory.Stock_On_Hand AS Current_Level
From
    Products
        Join
    Inventory ON Products.Product_Id = Inventory.Product_Id
        Join
    Stores ON Stores.Store_ID = Inventory.Store_ID 
	Order By Stores.Store_Name, Products.Product_Name;

-- *****************************************************************************************
-- 5.How do monthly Sales trends vary across different Stores?
SELECT 
    MONTHNAME(Date) AS Month_Name,
    Stores.Store_Name,
    ROUND(SUM(Products.Product_Price * Sales.Units),2) as Sale_$
From
    Sales
        Join
    Stores ON Stores.Store_ID = Sales.Store_ID
    Join Products on Products.Product_Id = Sales.Product_Id
Group By Month_Name , Stores.Store_Name
Order By FIELD(Month_Name,
        'January','February','March','April','May','June','July',
        'August','September','October','November','December') , Sale_$ DESC;


-- *****************************************************************************************
-- 6.Which Stores have the highest and lowest Sales performance?
SELECT 
    Stores.Store_Name,
    ROUND(SUM(Products.Product_Price * Sales.Units),4) AS Highest_Sale_$,
    SUM(Sales.Units) AS Highest_Unit_Sold
From
    Products Join Sales ON Products.Product_Id = Sales.Product_Id
	Join Stores ON Stores.Store_ID = Sales.Store_ID
Group By Store_Name
Order By Highest_Sale_$ DESC , Highest_Unit_Sold DESC
LIMIT 1;
SELECT 
    Stores.Store_Name,
    ROUND(SUM(Products.Product_Price * Sales.Units),4) AS Lowest_Sale_$,
    SUM(Sales.Units) AS Lowest_Unit_Sold
From Products Join Sales ON Products.Product_Id = Sales.Product_Id
Join Stores ON Stores.Store_ID = Sales.Store_ID
Group By Store_Name
Order By Lowest_Unit_Sold , Lowest_Sale_$
LIMIT 1;

-- ----------------------------------------------------------------------
-- Alternate method for finding highest sale dynamically 
with a as(select Stores.Store_Name,Stores.store_id,
ROUND(SUM(Products.Product_Price*Sales.Units),4) as highest_Sale_$,
dense_rank() over(Order By ROUND(SUM(Products.Product_Price*Sales.Units),4) desc) as sal
From Products Join Sales
on Products.Product_Id = Sales.Product_Id
Join Stores
on Stores.Store_ID = Sales.Store_ID
Group By Store_Name,store_id)
select a.Store_Name,a.highest_Sale_$
From a
where a.sal=1;

-- Alternate method for finding Lowest sale dynamically 
with a as(select Stores.Store_Name,Stores.store_id,
ROUND(SUM(Products.Product_Price*Sales.Units),4) as Lowest_Sale_$,
dense_rank() over(Order By ROUND(SUM(Products.Product_Price*Sales.Units),4)) as sal
From Products Join Sales
on Products.Product_Id = Sales.Product_Id
Join Stores
on Stores.Store_ID = Sales.Store_ID
Group By Store_Name,store_id)
select a.Store_Name,a.Lowest_sale_$
From a
where a.sal=1;

-- *****************************************************************************************
-- 7. What is the profit margin for each product?
SELECT 
    Products.Product_Name,
    ROUND(((SUM(Products.Product_Price * Sales.Units) - 
    SUM(Products.product_cost * Sales.Units)) / 
    SUM(Products.Product_Price * Sales.Units)) * 100,4)
    AS Profit_Margin_In_Percent
From
    Products
        Join
    Sales ON Products.Product_Id = Sales.Product_Id
Group By Products.Product_Name
Order By Profit_Margin_In_Percent DESC;
 
 -- *****************************************************************************************
 -- 8.How are Sales distributed across different cities?
SELECT 
    Stores.Store_City,
    ROUND(SUM(Products.Product_Price * Sales.Units),
            4) AS Sales_$
From
    Products
        Join
    Sales ON Products.Product_Id = Sales.Product_Id
        Join
    Stores ON Stores.Store_ID = Sales.Store_ID
Group By Stores.Store_City
Order By Sales_$ DESC;

-- *****************************************************************************************
 -- 9.Which Products are out of stock in each store?
SELECT 
    Stores.Store_Name, Products.Product_Name
From
    Products
        Join
    Inventory ON Products.Product_Id = Inventory.Product_Id
        Join
    Stores ON Stores.Store_ID = Inventory.Store_ID
WHERE
    Stock_On_Hand = 0
Group By Stores.Store_Name , Products.Product_Name
Order By Stores.Store_Name , Products.Product_Name;
 
 -- *****************************************************************************************
 -- 10.How do Sales vary by specific dates?
 SELECT 
    Date,
    ROUND(SUM(Products.Product_Price * Sales.Units),
            4) AS Sales_$
From
    Sales
        Join
    Products ON Products.Product_Id = Sales.Product_Id
GROUP BY Date
ORDER BY Sales_$;

-- *****************************************************************************************
-- 11.What is the average cost of Products in each category?
SELECT 
    Products.Product_Category,
    ROUND(AVG(Products.Product_Cost), 4) AS Avg_Cost_Prod_$
From
    Products
GROUP BY Products.Product_Category
ORDER BY Avg_Cost_Prod_$ DESC;

-- *****************************************************************************************
-- 12.What is the Sales growth over time for the entire company?
with a as 
	(SELECT monthname(Date) as Month_Name,
    ROUND(SUM(Products.Product_Price*Sales.Units),2) AS Monthly_Sale_$,
	LAG(ROUND(SUM(Products.Product_Price*Sales.Units),2),1) OVER() AS Previous_Month_Sale_$
	FROM
		Products JOIN Sales ON Products.Product_Id = Sales.Product_Id
	GROUP BY Month_Name)
SELECT 
    a.Month_Name,
    a.Monthly_Sale_$,
    ROUND(((a.Monthly_Sale_$ - a.Previous_Month_Sale_$) / a.Previous_Month_Sale_$) * 100,
            2) AS 'MOM_growth(%)'
From a;
    
-- *****************************************************************************************
-- 13.How does the store open Date affect Sales performance?
SELECT 
    Store_Name,
    Store_Open_Date,
    ROUND(SUM(Products.Product_Price * Sales.Units),
            4) AS Sales_$,
    SUM(Sales.Units) AS Unit_Sold
FROM
    Products
        JOIN
    Sales ON Products.Product_Id = Sales.Product_Id
        JOIN
    Stores ON Stores.Store_ID = Sales.Store_ID
GROUP BY Store_Name , Store_Open_Date
ORDER BY Store_Open_Date;

-- *****************************************************************************************
-- 14.What percentage of total Sales does each store contribute?
with a
as 
	(select Store_Name,
	ROUND(SUM(Products.Product_Price*Sales.Units),4) as Store_Sale_$
	From Products Join Sales
			on Products.Product_Id = Sales.Product_Id
	Join Stores on Stores.Store_ID = Sales.Store_ID
	Group By Store_Name
)
SELECT 
    a.Store_Name,
    a.Store_Sale_$,
    ROUND(a.Store_Sale_$ * 100 / (SELECT SUM(Store_Sale_$)
	FROM a),4) AS Store_Sale_Percentage
FROM a
ORDER BY Store_Sale_Percentage DESC;

-- *****************************************************************************************
-- 15.How do Sales compare to current stock levels for each product?
SELECT 
    Product_Name,
    Stock_On_Hand,
    ROUND(SUM(products.Product_Price * sales.Units),
            4) AS Sales_$
FROM
    Sales
        JOIN
    Inventory ON Sales.Product_Id = Inventory.Product_Id
        AND Inventory.Store_ID = Sales.Store_ID
        JOIN
    Products ON Products.Product_Id = Sales.Product_Id
GROUP BY Product_Name , Stock_On_Hand
ORDER BY Sales_$ DESC;

-- *****************************************************************************************
